# This file is part of FAST-OAD_CS23-HE : A framework for rapid Overall Aircraft Design of Hybrid
# Electric Aircraft.
# Copyright (C) 2022 ISAE-SUPAERO

import numpy as np
import openmdao.api as om


class PerformancesApparentPower(om.ExplicitComponent):
    """Computation of the electric apparent power generated by the turbo generator."""

    def initialize(self):

        self.options.declare(
            "number_of_points", default=1, desc="number of equilibrium to be treated"
        )

    def setup(self):

        number_of_points = self.options["number_of_points"]

        self.add_input("ac_current_rms_out", units="A", val=np.nan, shape=number_of_points)
        self.add_input("ac_voltage_rms_out", units="V", val=np.nan, shape=number_of_points)

        self.add_output(
            "apparent_power",
            units="W",
            val=np.full(number_of_points, 500.0e3),
            shape=number_of_points,
        )

        self.declare_partials(of="*", wrt="*", method="exact")

    def compute(self, inputs, outputs, discrete_inputs=None, discrete_outputs=None):

        outputs["apparent_power"] = inputs["ac_current_rms_out"] * inputs["ac_voltage_rms_out"]

    def compute_partials(self, inputs, partials, discrete_inputs=None):

        partials["apparent_power", "ac_voltage_rms_out"] = np.diag(inputs["ac_current_rms_out"])
        partials["apparent_power", "ac_current_rms_out"] = np.diag(inputs["ac_voltage_rms_out"])
